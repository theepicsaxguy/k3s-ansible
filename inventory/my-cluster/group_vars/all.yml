---
k3s_version: v1.30.2+k3s2
# this is the user that has ssh access to these machines
ansible_user: debian
systemd_dir: /etc/systemd/system

# Set your timezone
system_timezone: "Europe/Stockholm"

cluster_cidr: "10.25.150.0/24"

apiserver_endpoint: "10.25.150.10"

metal_lb_ip_range: "10.25.150.30-10.25.150.150"

kube_vip_lb_ip_range: "10.25.150.30-10.25.150.150"

k3s_node_ip: "10.25.150.11,10.25.150.12,10.25.150.13"

# Argo CD Configuration
argocd_version: "v2.5.3" # Specify the desired version
argocd_namespace: "argocd" # Namespace where Argo CD will be installed
argocd_admin_password: "your_secure_password" # Admin password for Argo CD

# Argo CD Domain Configuration
argocd_domain: "argocd.pc-tips.se" # Replace with your desired domain

argocd_map:
  gateway:
    server:
      hostname: "{{ argocd_domain }}"

# Rancher Domain Configuration
rancher_domain: "rancher.pc-tips.se" # Replace with your desired domain

rancher_map:
  gateway:
    server:
      hostname: "{{ rancher_domain }}"

# External DNS Configuration
externaldns_vars:
  cloudflare:
    host:
      domain: "pc-tips.se" # Replace with your actual domain
    acme:
      email: "your-email@example.com" # Replace with your actual email
      server: "https://acme-v02.api.letsencrypt.org/directory"
      private_key_secret: "acme-private-key" # Name for the private key secret
    prefix: "externaldns" # Example prefix

  kubernetes:
    helm:
      repository:
        org: "your-helm-org" # Replace with your Helm repository organization
        name: "external_dns-repo" # Replace with your Helm repository name
        url: "https://charts.your-helm-repo.com" # Replace with your Helm repository URL
      chart:
        name: "external_dns" # Helm chart name for External DNS
        version: "v5.4.0" # Specify the required chart version

kubeconfig_path: "/etc/rancher/k3s/k3s.yaml" # Ensure this path is correct

# Define External DNS API Token in global_map
global_map:
  credentials:
    argocd:
      server:
        admin:
          password: "{{ argocd_admin_password }}"
        user:
          name: "admin"
          password: "user_password"
    externaldns:
      cloudflare:
        api:
          token: "your-api-token" # Replace with your actual API token

# cert_manager Configuration
cert_manager_version: "v1.8.0"
cert_manager_namespace: "cert_manager"
cert_manager_issuer: "letsencrypt-prod"

# Define cert_manager Project Variables
certmanager_project:
  url: "https://github.com/cert_manager/cert_manager"
  tag: "v1.16.2"
  release:
    checksum: "https://github.com/cert_manager/cert_manager/releases/download/v1.16.2/checksums.txt"
    file: "cmctl_linux_arm64"

# Define additional cert_manager Metrics Variables
certmanager_map:
  metrics:
    service:
      monitor:
        scrape:
          interval: "30s" # Fallback if not set in role
          timeout: "10s" # Fallback if not set in role

# VictoriaMetrics Configuration
victoriametrics_map:
  service:
    monitor:
      scrape:
        interval: "30s"
        timeout: "10s"
victoriametrics_vars:
  kubernetes:
    namespace: "victoriametrics" # Namespace for VictoriaMetrics

# K3s Configuration
k3s_map:
  server:
    hosts: ["10.25.150.11", "10.25.150.12", "10.25.150.13"]
  node:
    directory:
      bin: "/usr/local/bin" # Adjust based on your environment
  agent:
    ha: true # Set to 'true' if HA is configured
  cluster:
    dns: "{{ apiserver_endpoint }}" # Newly added

k3s_vars:
  server:
    api:
      port: 6443 # Default K3s API server port
  cluster:
    domain: "pc-tips.se" # Newly added

k3s_token: "your_k3s_token_here" # Replace with your actual K3s token

helm_map:
  release:
    repository:
      org: "helm"
      name: "helm.sh"
      url: "https://baltocdn.com/helm/stable/debian/"
    chart:
      name: "argo-cd" # Helm chart name for Argo CD
      version: "v7.7.16" # Specify the required chart version
    channel: "stable"
    distro:
      name: "debian" # Replace with your OS if different
    version: "v3.8.0" # Desired Helm version

k3s_project:
  cluster:
    kubeconfig: "/etc/rancher/k3s/k3s.yaml" # Path to your kubeconfig

# Argo CD Postinstall Flag
argocd_postinstall: false # Initial value; set to 'true' post-installation

# CoreDNS Configuration
coredns_replica_count: 2 # Number of CoreDNS replicas
coredns_upstream_dns: "1.1.1.1" # Upstream DNS server

# External DNS Configuration
external_dns_provider: "cloudflare" # Example variable
external_dns_api_token: "your-api-token" # Replace with actual token
external_dns_domain: "example.com" # Domain to manage DNS records for
external_dns_record_type: "A" # DNS record type (e.g., A, CNAME)
external_dns_namespace: "external_dns" # Namespace for External DNS

# Only enable if your nodes are proxmox LXC nodes, make sure to configure your proxmox nodes
# in your hosts.ini file.
# Please read https://gist.github.com/triangletodd/02f595cd4c0dc9aac5f7763ca2264185 before using this.
# Most notably, your containers must be privileged, and must not have nesting set to true.
# Please note this script disables most of the security of lxc containers, with the trade off being that lxc
# containers are significantly more resource efficient compared to full VMs.
# Mixing and matching VMs and lxc containers is not supported, ymmv if you want to do this.
# I would only really recommend using this if you have particularly low powered proxmox nodes where the overhead of
# VMs would use a significant portion of your available resources.
proxmox_lxc_configure: false
# the user that you would use to ssh into the host, for example if you run ssh some-user@my-proxmox-host,
# set this value to some-user
proxmox_lxc_ssh_user: root
# the unique proxmox ids for all of the containers in the cluster, both worker and master nodes
proxmox_lxc_ct_ids:
  - 200
  - 201
  - 202
  - 203
  - 204

# Only enable this if you have set up your own container registry to act as a mirror / pull-through cache
# (harbor / nexus / docker's official registry / etc).
# Can be beneficial for larger dev/test environments (for example if you're getting rate limited by docker hub),
# or air-gapped environments where your nodes don't have internet access after the initial setup
# (which is still needed for downloading the k3s binary and such).
# k3s's documentation about private registries here: https://docs.k3s.io/installation/private-registry
custom_registries: false
# The registries can be authenticated or anonymous, depending on your registry server configuration.
# If they allow anonymous access, simply remove the following bit from custom_registries_yaml
#   configs:
#     "registry.domain.com":
#       auth:
#         username: yourusername
#         password: yourpassword
# The following is an example that pulls all images used in this playbook through your private registries.
# It also allows you to pull your own images from your private registry, without having to use imagePullSecrets
# in your deployments.
# If all you need is your own images and you don't care about caching the docker/quay/ghcr.io images,
# you can just remove those from the mirrors: section.
custom_registries_yaml: |
  mirrors:
    docker.io:
      endpoint:
        - "https://registry.domain.com/v2/dockerhub"
    quay.io:
      endpoint:
        - "https://registry.domain.com/v2/quayio"
    ghcr.io:
      endpoint:
        - "https://registry.domain.com/v2/ghcrio"
    registry.domain.com:
      endpoint:
        - "https://registry.domain.com"

  configs:
    "registry.domain.com":
      auth:
        username: yourusername
        password: yourpassword

# On some distros like Diet Pi, there is no dbus installed. dbus required by the default reboot command.
# Uncomment if you need a custom reboot command
# custom_reboot_command: /usr/sbin/shutdown -r now

# Only enable and configure these if you access the internet through a proxy
# proxy_env:
#   HTTP_PROXY: "http://proxy.domain.local:3128"
#   HTTPS_PROXY: "http://proxy.domain.local:3128"
#   NO_PROXY: "*.domain.local,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
