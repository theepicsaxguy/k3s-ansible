---
# roles/argo-cd/tasks/main.yml

# ## 1. Pre-Checks and Validation

- name: Check if kubeconfig exists
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig_stat

- name: Ensure kubeconfig exists
  ansible.builtin.assert:
    that:
      - kubeconfig_stat.stat.exists
      - kubeconfig_stat.stat.readable
    msg: "Kubeconfig at {{ kubeconfig_path }} is not accessible."

- name: Import validation tasks
  ansible.builtin.import_tasks:
    file: validation.yaml
  any_errors_fatal: true

# ## 2. Set Checksums Before Setup

- name: Set checksums fact
  ansible.builtin.uri:
    url: "{{ argocd_project.release.checksum }}"
    return_content: true
  register: checksums
  check_mode: false
  run_once: true

- name: Set sha256 checksum fact
  ansible.builtin.set_fact:
    sha256_checksum: "{{ item.split(' ')[0] }}"
  loop: "{{ checksums.content.split('\n') }}"
  when: item | regex_search(argocd_vars.release.file + '$')
  run_once: true

# ## 3. Create Argo CD Namespace and Perform Setup

- name: Create Argo CD namespace and perform setup
  block:
    - name: Create Argo CD namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ argo-cd_namespace }}"
      when: inventory_hostname in k3s_map.server.hosts

    - name: Validate service state
      ansible.builtin.wait_for:
        port: "{{ k3s_vars.server.api.port }}"
        state: started
        timeout: 30
      any_errors_fatal: true

    # Additional setup tasks can be added here if necessary

  rescue:
    - name: Handle errors in setup
      ansible.builtin.debug:
        msg: "An error occurred during Argo CD namespace creation or setup."

# ## 4. Install Binary

- name: Install binary
  ansible.builtin.get_url:
    url: "{{ argocd_project.release.file }}"
    checksum: "sha256:{{ sha256_checksum }}"
    dest: "{{ k3s_map.node.directory.bin }}/argocd"
    owner: root
    group: root
    mode: "755"
  register: result
  delay: 1
  retries: 5
  timeout: 600
  until: result is not failed

# ## 5. Add Helm Repository

- name: Add repository
  kubernetes.core.helm_repository:
    name: "{{ argocd_vars.kubernetes.helm.repository.name }}"
    repo_url: "{{ argocd_map.helm.repository.url }}"

# ## 6. Chart Setup

- name: Chart Setup
  run_once: true
  block:
    - name: Set chart postinstall fact
      ansible.builtin.set_fact:
        argocd_postinstall: false

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: "{{ argocd_map.helm.chart.reference }}"
        chart_version: "{{ argocd_vars.kubernetes.helm.chart.version }}"
        kubeconfig: "{{ kubeconfig_path }}"
        name: "{{ argocd_vars.kubernetes.helm.chart.name }}"
        namespace: "{{ argo-cd_namespace }}"
        timeout: "{{ argocd_map.helm.timeout }}"
        values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
        create_namespace: true
        update_repo_cache: true
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Gateway Setup
      when:
        - argocd_vars.kubernetes.configs.params.server.insecure | bool
        - externaldns_vars.cloudflare.host.domain | lower != 'disabled'
      block:
        - name: Create gateway
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path }}"
            definition: "{{ lookup('ansible.builtin.template', 'gateway.j2') | from_yaml }}"
            wait: true

        - name: Create insecure http route
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path }}"
            definition: "{{ lookup('ansible.builtin.template', 'http_route_insecure.j2') | from_yaml }}"
            wait: true

        - name: Create secure http route
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_path }}"
            definition: "{{ lookup('ansible.builtin.template', 'http_route_secure.j2') | from_yaml }}"
            wait: true

# ## 7. Post-Installation Tasks (Optional)

- name: Post-installation verification
  debug:
    msg: "Argo CD installation completed successfully."
