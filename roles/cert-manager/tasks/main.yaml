---
- name: Role Validation
  ansible.builtin.import_tasks:
    file: validation.yaml
  any_errors_fatal: true

- name: Role Provisioning
  when: ansible_host in k3s_map.server.hosts
  block:

    - name: Validate service state
      ansible.builtin.wait_for:
        port: "{{ k3s_vars.server.api.port }}"
        state: drained
        timeout: 30
      any_errors_fatal: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: "{{ certmanager_project.release.checksum }}"
        return_content: true
      register: checksums
      check_mode: false
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: item | regex_search(certmanager_vars.release.file + '$') or item | regex_search('/' + certmanager_vars.release.file + '$')
      run_once: true

    - name: Set cmctl download URL
      ansible.builtin.set_fact:
        cmctl_download_url: "{{ certmanager_project.release.url }}/cmctl_{{ cli_os | default('unknown') }}_{{ cli_arch | default('unknown') }}"

    - name: Check if cmctl is already installed
      ansible.builtin.stat:
        path: "{{ certmanager_vars.bin_directory }}/cmctl"
      register: cmctl_stat

    - name: Download cmctl binary
      ansible.builtin.get_url:
        url: "{{ cmctl_download_url }}"
        dest: "/tmp/cmctl"
        mode: '0755'
        owner: root
        group: root
        checksum: "sha256:{{ sha256_checksum }}"
      when: not cmctl_stat.stat.exists
      register: download_result
      retries: 5
      delay: 5
      until: download_result is succeeded
      failed_when: download_result.failed and download_result.retries >= 5

    - name: Check if cmctl is already installed
      ansible.builtin.stat:
        path: "{{ certmanager_vars.bin_directory }}/cmctl"
      register: cmctl_stat

    - name: Move and rename cmctl binary to bin directory
      ansible.builtin.command:
        cmd: mv /tmp/"{{ cmctl_download_url.split('/')[-1] }}" "{{ certmanager_vars.bin_directory }}/cmctl"
      when: download_result is succeeded
      register: move_result

    - name: Create symlink for cmctl
      ansible.builtin.file:
        path: "{{ certmanager_vars.bin_directory }}/kubectl-cert_manager"
        src: "{{ certmanager_vars.bin_directory }}/cmctl"
        state: link
        force: yes
      when:
        - not ansible_check_mode
        - move_result is succeeded or cmctl_stat.stat.exists

    - name: Simulate symlink creation for cmctl in check mode
      ansible.builtin.debug:
        msg: "Would create symlink '{{ certmanager_vars.bin_directory }}/kubectl-cert_manager' pointing to '{{ certmanager_vars.bin_directory }}/cmctl'."
      when:
        - ansible_check_mode
        - not cmctl_stat.stat.exists

    - name: Add Jetstack Helm repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: '{{ certmanager_vars.kubernetes.helm.repository.url }}'
        state: present

    - name: Chart Setup
      run_once: true
      block:
        - name: Set chart postinstall fact
          ansible.builtin.set_fact:
            certmanager_postinstall: false
	
				- name: Add Jetstack Helm repository
				  kubernetes.core.helm_repository:
				    name: cert-manager            # <-- The repo name is "cert-manager"
				    repo_url: "https://charts.jetstack.io"
				    state: present
				
				- name: Install cert-manager
				  kubernetes.core.helm:
				    release_name: cert-manager
				    release_namespace: cert-manager
				    name: cert-manager
				    namespace: cert-manager
				    create_namespace: true
				
				    # Must match the repository name above: "cert-manager"
				    # Then slash chart name: "cert-manager"
				    chart_ref: "cert-manager/cert-manager"
				
				    # Remove any leading 'v'
				    chart_version: "1.16.3"
				
				    update_repo_cache: true
				    wait: true
				    values:
				      prometheus:
				        enabled: false
				      installCRDs: true

        - name: Create self-signed cluster issuer
          kubernetes.core.k8s:
            definition: "{{ lookup('ansible.builtin.template', 'cluster_issuer.j2') | from_yaml }}"
            kubeconfig: '{{ k3s_project.cluster.kubeconfig }}'
            wait: true
